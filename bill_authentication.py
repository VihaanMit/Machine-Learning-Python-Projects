# -*- coding: utf-8 -*-
"""Bill_Authentication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qGv6Pn3YUcuRL-eTuxGw99ZfP1CCD526
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import scatter_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.metrics import mean_squared_error
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.svm import SVC, LinearSVC

data=pd.read_csv('bill_authentication.csv')
column_names=['Variance','Skewness','Curtosis','Entropy']
X=data.drop(columns=['Class'])
Y=data['Class']

#Print first 15 rows
print(data.head(15))

description=data.describe()
print(description)

df1=pd.DataFrame(data,columns=column_names)
df1.hist(column_names)
plt.show()

#Creating heatmap
plt.figure()
corMat = data.corr(method='pearson')
sns.heatmap(corMat, square=True)
plt.title("Correlation Heatmap")
plt.show()

#Creating scatterplot matrix
plt.figure()
scatter_matrix(data)
plt.show()

X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

#Decision Tree
dt_classifier = DecisionTreeClassifier(max_depth= 4)
dt_classifier.fit(X_train, Y_train)
y_pred = dt_classifier.predict(X_test)
df = pd.DataFrame({'Actual': Y_test, 'Predicted': y_pred})
print(df)
accuracy = metrics.accuracy_score(Y_test, y_pred)
print('Accuracy:', accuracy)
kfold = KFold(n_splits=10, random_state=7, shuffle=True)
cv_results = cross_val_score(dt_classifier, X, Y, cv=kfold, scoring='accuracy')
print(cv_results)
msg = "%s: %f (%f)" % ('Decision Tree', cv_results.mean(), cv_results.std())
print(msg)

#Random Forest
random_forest = RandomForestClassifier(n_estimators=200, random_state=0)
random_forest.fit(X_train, Y_train)
Y_pred_rf = random_forest.predict(X_test)
df1 = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_pred_rf})
print(df1)
accuracy = metrics.accuracy_score(Y_test, Y_pred_rf)
print('Accuracy:', accuracy)
kfold = KFold(n_splits=10, random_state=7, shuffle=True)
cv_results_rf = cross_val_score(random_forest, X, Y, cv=kfold, scoring='accuracy')
print(cv_results_rf)
msg = "%s: %f (%f)" % ('Random Forest', cv_results_rf.mean(), cv_results_rf.std())
print(msg)

# AdaBoost Regression
ada_clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),n_estimators=200,learning_rate=0.5,random_state=0)
ada_clf.fit(X_train, Y_train)
Y_pred_ada = ada_clf.predict(X_test)
accuracy = metrics.accuracy_score(Y_test, Y_pred_ada)
print('Accuracy:', accuracy)
kfold = KFold(n_splits=10, random_state=7, shuffle=True)
cv_results_ada = cross_val_score(ada_clf, X, Y, cv=kfold, scoring='accuracy')
print(cv_results_ada)
msg = "%s: %f (%f)" % ('Adaboost', cv_results_ada.mean(), cv_results_ada.std())
print(msg)

# Linear SVC
linear_svc = LinearSVC(random_state=0)
linear_svc.fit(X_train, Y_train)
Y_pred_linear_svc = linear_svc.predict(X_test)
linear_svc_mse = metrics.accuracy_score(Y_test, Y_pred_linear_svc)
print('Linear SVC Test MSE:', linear_svc_mse)

# Kernel SVC
kernel_svr = SVC(kernel='rbf')
kernel_svr.fit(X_train, Y_train)
Y_pred_kernel_svr = kernel_svr.predict(X_test)
kernel_svr_mse = metrics.accuracy_score(Y_test, Y_pred_kernel_svr)
print('Kernel SVR Test MSE:', kernel_svr_mse)