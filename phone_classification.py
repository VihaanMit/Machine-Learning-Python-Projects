# -*- coding: utf-8 -*-
"""Phone Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ImTI9xtPUqQTRHYu1Wmix7o3nYiDZYyi
"""

from sklearn.feature_selection import RFE
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from six import StringIO
from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix, classification_report

data=pd.read_csv('phone_classification.csv')

X = data.drop('price_range', axis=1)
y = data['price_range']

df=pd.DataFrame(data,columns=data.columns)

plt.figure()
corMat = df.corr(method='pearson')
sns.heatmap(corMat, square=True)
plt.title("Correlation Heatmap")
plt.show()


NUM_FEATURES = 4
model = RandomForestClassifier()
rfe = RFE(estimator=model, n_features_to_select=NUM_FEATURES)
fit = rfe.fit(X, y)
# print("Num Features:", fit.n_features_)
# print("Selected Features:", fit.support_)
# print("Feature Ranking:", fit.ranking_)
selected_features = X.columns[fit.support_]
# print("Selected Features:", selected_features.tolist())
score = rfe.score(X, y)
# print("Model Score with selected features is:", score)

selected_features=selected_features.tolist()
# for i in X.columns:
#   sns.regplot(x=i,y='price_range',data=data)
#   plt.grid(True)
#   plt.show()
#   #Printing correlation coefficient along with plots in relation to median house value
#   print(data[i].corr(data['price_range']))

X_train, X_test, y_train, y_test = train_test_split(X[selected_features], y, test_size=0.2, random_state=42)

clf=RandomForestClassifier(random_state=42, max_depth=10)

clf.fit(X_train, y_train)

y_pred=clf.predict(X_test)

accuracy=accuracy_score(y_test,y_pred)
print(accuracy)

k = 10

cv_scores = cross_val_score(clf, X[selected_features], y, cv=k, scoring='accuracy')


print(f"Cross-validation scores for each fold: {cv_scores}")
print(f"Average cross-validation score: {cv_scores.mean()}")

report = classification_report(y_test, y_pred, target_names=['Low', 'Medium', 'High', 'Very High'])
print("Classification Report:\n", report)

cm = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Low', 'Medium', 'High', 'Very High'], yticklabels=['Low', 'Medium', 'High', 'Very High'])
plt.title("Confusion Matrix")
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# dot_data = StringIO()
# export_graphviz(clf, out_file=dot_data, filled=True, rounded=True,
# special_characters=True)
# graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
# Image(graph.create_png())